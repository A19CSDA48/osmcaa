                                      First Come First Serve
#include<stdio.h>
int main()
{
int n,b[10],i,r=0,a=0,t=0,w=0;
float avg,avg1;
printf("\n Enter the number of process:");
scanf("%d",&n);
printf("\n Enter the burst times::\n");
for (i=1;i<=n;i++)
scanf("%d",&b[i]);
printf("\n Grant Chart");
for(i=1;i<=n;i++);
printf("p %d\t",i);
printf("in\n process Burst Time waiting time turn around time \n");
for(i=1;i<=n;i++)
{
t=t+w;
r=r+b[1];
printf("p%d\t\t%d\t\t %d\t\t %d\t\t %d\t\t %d\t\t\n",i,b[i],w,r);
w=w+b[i];
a=a+r;
}
avg =(float)t/n;
avg1=(float)a/n;
printf("\n average turnaround time is %f\n",avg);
printf("\n average waitingtime is %f\n",avg1);
return(0);
}




                                         Shortest Job First


#include<stdio.h>
int main()
{
int n,w[100],tot[100],i,j,awt,atot;
float avwt,avtot;
struct
{
int p,bt;
}
sjf[10],temp;
printf("<=====Shortest Job=====>");
printf("Enter the number of process:");
scanf("%d",&n);
for (i=1;i<=n;i++)
{
printf("Enter the Burst time for the process %d:",i);
scanf("%d",&sjf[i].bt);
sjf[i].p=i ;
}
for (i=1;i<=n;i++)
for(j=1;j<n;j++)
if (sjf[i].bt>sjf[i].bt)
{
temp=sjf[i];
sjf[i]=sjf[j];
sjf[j]=temp;
}
w[1]=0;
tot[1]=sjf[1].bt;
for(i=2;i<=n;i++)
tot[i]=tot[i-1]+sjf[i].bt;
awt=0;
atot=0;
for(i=1;i<=n;i++)
{
w[i]=tot[i]-sjf[i].bt;
awt=w[i];atot=tot[i];
}
avwt=(float)awt/n;
avtot=(float)atot/n;
printf("\n\n Process Id is waiting time\t Turnaround time");
for(i=1;i<=n;i++)
printf("\n \t %d \t\t %d \t\t %d",sjf[i].p,w[i],tot[i]);
printf("\n\n Total waiting time :%d",awt);
printf("\n\n Total turnaround time:%d",atot);
printf("\n\n Average Time for waiting: %.2f",avwt);
printf("\n\n average turnaround time :: %.2f",avtot);
}







                                                            ROUND ROBIN()


#include<stdio.h>
int main()
{
int i,tbt=0,nop,ts=0,flag[20], rem[20];
int from,wt[20],tt[20],b[20], twt=0,ttt=0;
int dur;
float awt,att;
printf("Enter no. of Processes: ");
scanf("%d",&nop);
printf("Enter the time slice: ");
scanf("%d",&ts);
printf("Enter the Burst times..\n");
for(i=0;i<nop;i++)
{
wt[i]=tt[i]=0;
printf("P%d\t: ",i+1);
scanf("%d",&b[i]);
rem[i]=b[i];
tbt+=b[i];
flag[i]=0;
}
from=0;
i=0;
printf("\n\t Gantt Chart");
printf("\n ProcessID\tFrom Time\tTo Time\n");
while(from<tbt)
{
if(!flag[i])
{
if(rem[i]<=ts)
{
dur=rem[i];
flag[i]=1;
tt[i]=dur+from;
wt[i]=tt[i]-b[i];
}
else
dur=ts;
printf("%7d%15d%15d\n",i+1, from,from+dur);
rem[i] -= dur;
from += dur;
}
i=(i+1)%nop;
}
for(i=0;i<nop;i++)
{
twt+=wt[i];
ttt+=tt[i];
}
printf("\n\n Process ID \t Waiting Time \t Turn Around Time");
for(i=0;i<nop;i++)
{
printf("\n\t%d\t\t%d\t\t%d",i+1,wt[i],tt[i]);
}
awt=(float)twt/(float)nop;
att=(float)ttt/(float)nop;
printf("\nTotal Waiting Time:%d",twt);
printf("\nTotal Turn Around Time:%d",ttt);
printf("\nAverage Waiting Time:%.2f",awt);
printf("\nAverage Turn Around Time:%.2f\n",att);}











                                             SEQUENTIAL FILE ALLOCATION
PROGRAM CODE:
#include<stdio.h>
#include<conio.h>
struct filetable
{
char name[20];
int sb,nob;
}ft[30];
int main()
{
int i,j,n;
char s[20];
printf("Enter the No of Files:");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("\n Enter File name %d :",i+1);
scanf("%s",&ft[i].name);
printf("Enter starting blocks of File %d :",i+1);
scanf("%d",&ft[i].sb);
printf("Enter no of blocks in File%d: ",i+1);
scanf("%d",&ft[i].nob);
}
printf("\n Enter the File name to be searched----");-
scanf("%s",s);
for(i=0;i<n;i++)      
               break;

if(i==n)
printf("\n File is no found");

else
{
printf("\n File name start block no of blocks blocks occupied \n");
printf("\n%s \t\t%d \t\t%d \t\t%d \t",ft[i].name,ft[i].sb,ft[i].nob);
for(j=0;j<ft[i].nob;j++)
printf("%d",ft[i].sb+j);
}
getch();
}






                                             PRIORITY SCHEDULING
PROGRAM CODE:
#include<stdio.h>
int main()
{
int n,temp=0,w[20],b[20], p[20],
t2[20],j,t1,d[20],i,
te=0,b1[20],t3=0;
float t,r;
w[1]=0;
printf("\nEnter no. of processes:");
scanf("%d",&n);
printf("\nEnter the burst times : ");
for(i=1;i<=n;i++)
{
printf("P%d : ",i);
scanf("%d",&b[i]); d[i]=i;
}
printf("Enter the priorities:");
for(i=1;i<=n;i++)
{
printf("P%d : ",i);
scanf("%d",&p[i]);
}
for(i=1;i<=n;i++)
for(j=i+1;j<=n;j++)
if(p[i]<p[j])
{
temp=p[i];
t1=d[i];
te=b[i];
p[i]=p[j];
d[i]=d[j];
b[i]=b[j];
p[j]=temp;
d[j]=t1;
b[j]=te;
}
printf("\nGantt Chart : ");
for(i=1;i<=n;i++) printf("P%d\t",d[i]);
printf("\nProcess \t Priority\tBurst Time\t Waiting Time\t Turnaround Time");
for(i=1;i<=n;i++)
{
t=d[i];
w[i+1]=w[i]+b[i];
t2[i]=b[i]+w[i];
t3+=t2[i];
printf("\nP%d\t\t%d\t\t%d\t\t%d\t\t%d",d[i],p[i],b[i],w[i],t2[i]);
}
temp=0;
for(i=1;i<=n;i++)
temp+=w[i];
t=(float)temp/n;
r=(float)t3/n;
printf("\nAverage Waiting time : %.2f",t);
printf("\nAverage Turnaround time : %.2f",r);
return 0;
}






                                    FIRST FIT MEMORY ALLOCATION


PROGRAM CODE:

#include<stdio.h>
#include<conio.h>
#define max 25
int main()
{
int frag[max],b[max],f[max],i,j,nb,nf,temp;
static int bf[max],ff[max];
printf("\n\t Memory Managment Scheme -First Fit");
printf("\n Enter the number of blocks:");
scanf("%d",&nb);
printf("Enter the number of files:");
scanf("%d",&nf);
printf("\n Enter the size of the blocks:\n");
for(i=1;i<=nb;i++)
{
printf("Block %d:",i);
scanf("%d",&b[i]);
}
printf("Enter the size of the files:\n");
for(i=1;i<=nf;i++)
{
printf("File %d :",i);
scanf("%d",&f[i]);
}
for(i=1;i<=nb;i++)
{
for(j=1;j<=nb;j++)
{
if(bf[j]!=1)
{
temp=b[j]-f[i];
if(temp>=0)
{
ff[i]=j;
break;
}
}
}
frag[i]=temp;
bf[ff[i]]=1;
}
printf("\n File-no.:\tfile-size:\tblock-no:\tblock-size:\tfragment");
for(i=1;i<=nf;i++)
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t",i,f[i],ff[i],b[ff[i]],frag[i]);
getch();
}


                                     INDEX FILE ALLOCATION

PROGRAM CODE:
#include<stdio.h>
int main()
{
char a[10];
int i,ib,cib[10];
printf("\n Enter the file name:");
scanf("%s",&a);
printf("\n Indexed block:");
scanf("%d",&ib);
for(i=1;i<=5;i++)
{
printf("\n Enter the child of the index block %d: ",i);
scanf("%d",&cib[i]);
}
printf("\n The list of files\t indexed block\n");
printf("%s \t\t %d \t\t%d",a,ib);
printf("\n the above file utlization index block of child blocks following\t");
printf("\n");
for(i=1;i<=5;i++)
{
printf("%d\t\t",cib[i]);
}
printf("\n");
}


                                            LINKED ALLOCATION
PROGRAM CODE:
#include<stdio.h>
int main()
{
char a[10];
int i,sb,eb,fb[10];
printf("\n Enter the name:");
scanf("%s",&a);
printf("\n Enter the starting block:");
scanf("%d",&sb);
printf("Enter the ending block:");
scanf("%d",&eb);
for(i=0;i<5;i++)
{
printf("Enter the free block %d :",i+1);
scanf("%d",&fb[i]);
}
printf("\n Filename\t starting block \t Ending block:\n");
printf("%s \t\t%d \t\t%d",a,sb,eb);
printf("\n %s File utilisation of linked type of following block\n",a);
printf("\n %d-->",sb);
for(i=0;i<5;i++)
{
printf("%d -->",fb[i]);
}
printf("%d\n",eb);
}






                                                BEST FIT MEMORY ALLOCATION()
PROGRAM CODE:
#include<stdio.h>
#include<conio.h>
#define max 25
int main()
{
int frag[max],b[max],f[max],i,j,nb,nf,temp,lowest = 10000;
static int bf[max],ff[max];
printf("\n Enter the number of Blocks:");
scanf("%d",&nb);
printf("\n Enter the number of Files:");
scanf("%d",&nf);
printf("\n Enter the Size of the Blocks:\n");
for(i=1;i<=nb;i++)
{
printf("\n Block %d:",i);
scanf("%d",&b[i]);
}
printf("\n Enter the Size of the Files:\n");
for(i=1;i<=nf;i++)
{
printf("File %d:",i);
scanf("%d",&f[i]);
}
for(i=1;i<=nf;i++)
{
for(j=1;j<=nb;j++)
{
if(bf[j]!=1)
{
temp = b[j]-f[i];
if(temp>=0)
if(lowest>temp)
{
ff[i]=j;
lowest=temp;
}
}
}
frag[i]=lowest;
bf[ff[i]]=1;
lowest=10000;
}
printf("\n File No\tFile Size\tBlock No\tBlock Size\tFragment");
for(i=1;i<=nf&&ff[i]!=0;i++)
printf("\n %d\t\t%d\t\t%d\t\t%d\t\t%d",i,f[i],ff[i],b[ff[i]],frag[i]);
getch();
}











                                             WORST FIT MEMORY ALLOCATION


PROGRAM CODE:
#include <stdio.h>
#include <conio.h>
#define max 25
int main()
{
int frag[max],b[max],f[max],i,j,nb,nf,temp,highest = 0;
static int bf[max],ff[max];
printf("\n Memory Management Scheme - Worst Fit");
printf("\n Enter the number of Blocks:");
scanf("%d",&nb);
printf("\n Enter the number of Files:");
scanf("%d",&nf);
printf("\n Enter the Size of the Blocks:\n");
for(i=1;i<=nb;i++)
{
printf("\n Block %d:",i);
scanf("%d",&b[i]);
}
printf("\n Enter the Size of the Files:\n");
for(i=1;i<=nf;i++)
{
printf("File %d:",i);
scanf("%d",&f[i]);
}
for(i=1;i<=nf;i++)
{
for(j=1;j<=nb;j++)
{
if(bf[j]!=1)
{
temp = b[j]-f[i];
if(temp>=0)
if(highest<temp)
{
ff[i]=j;
highest=temp;
}
}
}
frag[i]=highest;
bf[ff[i]]=1;
highest=0;
}
printf("\n File No\tFile Size\tBlock No\tBlock Size\tFragment");
for(i=1;i<=nf;i++)
printf("\n %d\t\t%d\t\t%d\t\t%d\t\t%d",i,f[i],ff[i],b[ff[i]],frag[i]);
getch();
}




fibonacci series:
#include <iostream>
using namespace std;

int main() {
    int n, t1 = 0, t2 = 1, nextTerm = 0;

    cout << "Enter the number of terms: ";
    cin >> n;

    cout << "Fibonacci Series: ";

    for (int i = 1; i <= n; ++i) {
        if(i == 1) {
            cout << t1 << ", ";
            continue;
        }
        if(i == 2) {
            cout << t2 << ", ";
            continue;
        }
        nextTerm = t1 + t2;
        t1 = t2;
        t2 = nextTerm;
        
        cout << nextTerm << ", ";
    }
    return 0;
}




prime number:

#include <iostream>  
using namespace std;  
int main()  
{  
  int n, i, m=0, flag=0;  
  cout << "Enter the Number to check Prime: ";  
  cin >> n;  
  m=n/2;  
  for(i = 2; i <= m; i++)  
  {  
      if(n % i == 0)  
      {  
          cout<<"Number is not Prime."<<endl;  
          flag=1;  
          break;  
      }  
  }  
  if (flag==0)  
      cout << "Number is Prime."<<endl;  
  return 0;  
} 


palindrome :


#include <iostream>
using namespace std;

int main()
{
     int n, num, digit, rev = 0;

     cout << "Enter a positive number: ";
     cin >> num;

     n = num;

     do
     {
         digit = num % 10;
         rev = (rev * 10) + digit;
         num = num / 10;
     } while (num != 0);

     cout << " The reverse of the number is: " << rev << endl;

     if (n == rev)
         cout << " The number is a palindrome.";
     else
         cout << " The number is not a palindrome.";

    return 0;
}






factorial:


#include <iostream>  
using namespace std;  
int main()  
{  
   int i,fact=1,number;    
  cout<<"Enter any Number: ";    
 cin>>number;    
  for(i=1;i<=number;i++){    
      fact=fact*i;    
  }    
  cout<<"Factorial of " <<number<<" is: "<<fact<<endl;  
  return 0;  
}  





string reverse:

#include<iostream>
#include<string.h>
using namespace std;
int main ()
{
    char str[50], temp;
    int i, j;
    cout << "Enter a string : ";
    gets(str);
    j = strlen(str) - 1;
    for (i = 0; i < j; i++,j--)
    {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
    cout << "\nReverse string : " << str;
    return 0;
}





C++ Program to Calculate Student Marks

#include<iostream>

using namespace std;

int main()
{
	int english, chemistry, computers, physics, maths; 
    float total, average, percentage;

    cout << "Please Enter the marks of five subjects: \n";
    cin >> english >> chemistry >> computers >> physics >> maths;

    total = english + chemistry + computers + physics + maths;
    average = total / 5;
    percentage = (total / (500)) * 100;

    cout << "\nTotal Marks      = " << total;
    cout << "\nAverage Marks    = " << average;
    cout << "\nMarks Percentage = " << percentage;
 	return 0;
} 